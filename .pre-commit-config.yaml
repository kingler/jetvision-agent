# JetVision Platform Pre-commit Hooks Configuration
# This ensures code quality and consistency before commits

repos:
  # General code formatting and linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
      - id: end-of-file-fixer
        exclude: '\.md$'
      - id: check-yaml
        args: ['--allow-multiple-documents']
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-symlinks
      - id: destroyed-symlinks
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ['--fix=lf']

  # JavaScript/TypeScript specific
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        name: ESLint Apollo MCP Server
        files: ^apollo-io-mcp-server/.*\.(js|jsx|ts|tsx)$
        args: [--fix, --ext, .js,.jsx,.ts,.tsx]
        additional_dependencies:
          - eslint@8.56.0
          - '@typescript-eslint/eslint-plugin@6.19.0'
          - '@typescript-eslint/parser@6.19.0'
      - id: eslint
        name: ESLint Avainode MCP Server
        files: ^avainode-mcp-server/.*\.(js|jsx|ts|tsx)$
        args: [--fix, --ext, .js,.jsx,.ts,.tsx]
        additional_dependencies:
          - eslint@8.56.0
          - '@typescript-eslint/eslint-plugin@6.19.0'
          - '@typescript-eslint/parser@6.19.0'

  # Prettier formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        name: Prettier Apollo MCP Server
        files: ^apollo-io-mcp-server/.*\.(js|jsx|ts|tsx|json|yaml|yml|md)$
        exclude: |
          (?x)^(
            .*\.lock$|
            .*node_modules/.*|
            .*dist/.*|
            .*build/.*
          )$
      - id: prettier
        name: Prettier Avainode MCP Server
        files: ^avainode-mcp-server/.*\.(js|jsx|ts|tsx|json|yaml|yml|md)$
        exclude: |
          (?x)^(
            .*\.lock$|
            .*node_modules/.*|
            .*dist/.*|
            .*build/.*
          )$
      - id: prettier
        name: Prettier JetVision Agent
        files: ^jetvision-agent/.*\.(js|jsx|ts|tsx|json|yaml|yml|md)$
        exclude: |
          (?x)^(
            .*\.lock$|
            .*node_modules/.*|
            .*dist/.*|
            .*build/.*|
            .*\.next/.*
          )$

  # TypeScript type checking
  - repo: local
    hooks:
      - id: typescript-apollo
        name: TypeScript Check Apollo MCP Server
        entry: bash -c 'cd apollo-io-mcp-server && npm run type-check'
        language: system
        files: ^apollo-io-mcp-server/.*\.tsx?$
        pass_filenames: false
      - id: typescript-avainode
        name: TypeScript Check Avainode MCP Server
        entry: bash -c 'cd avainode-mcp-server && npm run type-check'
        language: system
        files: ^avainode-mcp-server/.*\.tsx?$
        pass_filenames: false

  # Test execution
  - repo: local
    hooks:
      - id: unit-tests-apollo
        name: Unit Tests Apollo MCP Server
        entry: bash -c 'cd apollo-io-mcp-server && npm run test:unit:quick'
        language: system
        files: ^apollo-io-mcp-server/(src|tests)/.*\.(js|ts)$
        pass_filenames: false
      - id: unit-tests-avainode
        name: Unit Tests Avainode MCP Server
        entry: bash -c 'cd avainode-mcp-server && npm run test:unit:quick'
        language: system
        files: ^avainode-mcp-server/(src|tests)/.*\.(js|ts)$
        pass_filenames: false
      - id: unit-tests-webapp
        name: Unit Tests JetVision Web App
        entry: bash -c 'cd jetvision-agent/apps/web && bun run test:quick'
        language: system
        files: ^jetvision-agent/apps/web/(app|components|lib)/.*\.(js|jsx|ts|tsx)$
        pass_filenames: false

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: |
          (?x)^(
            .*\.lock$|
            .*node_modules/.*|
            .*\.git/.*|
            .*coverage/.*|
            .*dist/.*|
            .*build/.*
          )$

  # Dependency vulnerability check
  - repo: local
    hooks:
      - id: audit-apollo
        name: NPM Audit Apollo MCP Server
        entry: bash -c 'cd apollo-io-mcp-server && npm audit --audit-level=moderate'
        language: system
        files: ^apollo-io-mcp-server/package(-lock)?\.json$
        pass_filenames: false
      - id: audit-avainode
        name: NPM Audit Avainode MCP Server
        entry: bash -c 'cd avainode-mcp-server && npm audit --audit-level=moderate'
        language: system
        files: ^avainode-mcp-server/package(-lock)?\.json$
        pass_filenames: false

  # API Schema validation
  - repo: local
    hooks:
      - id: validate-mcp-schemas
        name: Validate MCP Tool Schemas
        entry: bash -c 'node scripts/validate-mcp-schemas.js'
        language: system
        files: ^(apollo-io-mcp-server|avainode-mcp-server)/src/.*tools.*\.(js|ts)$
        pass_filenames: false

  # Performance regression check (only on staged files)
  - repo: local
    hooks:
      - id: performance-check
        name: Performance Regression Check
        entry: bash -c 'scripts/check-performance-regression.sh'
        language: system
        files: ^(apollo-io-mcp-server|avainode-mcp-server)/src/.*\.(js|ts)$
        pass_filenames: false
        stages: [manual] # Only run when explicitly requested

  # Documentation updates
  - repo: local
    hooks:
      - id: update-api-docs
        name: Update API Documentation
        entry: bash -c 'scripts/update-api-docs.sh'
        language: system
        files: ^(apollo-io-mcp-server|avainode-mcp-server)/src/.*tools.*\.(js|ts)$
        pass_filenames: false

# Configuration
default_stages: [commit, push]
fail_fast: false

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false