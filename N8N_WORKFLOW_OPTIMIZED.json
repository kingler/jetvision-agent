{
  "name": "JetVision Agent - Optimized",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "jetvision-agent",
        "responseMode": "lastNode",
        "options": {
          "allowedOrigins": "*",
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [100, 200],
      "id": "webhook-trigger",
      "name": "Webhook Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate the incoming request\nconst body = $input.item.json.body || $input.item.json;\nconst message = body.message || body.prompt || body.query || '';\nconst context = body.context || {};\nconst threadId = body.threadId || '';\n\n// Log for debugging\nconsole.log('Received message:', message);\nconsole.log('Context:', context);\n\n// Prepare data for the agent\nreturn {\n  query: message,\n  message: message,\n  threadId: threadId,\n  context: context,\n  timestamp: new Date().toISOString(),\n  source: context.source || 'jetvision-agent'\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 200],
      "id": "prepare-data",
      "name": "Prepare Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "# JetVision Agent System Prompt\n\nYou are the JetVision Business Manager Agent with 20+ years of expertise in private aviation. You help with:\n\n1. **Apollo.io Integration**: Lead generation, campaign management, and prospect intelligence\n2. **Avinode Operations**: Aircraft availability, fleet management, and charter coordination\n3. **Business Intelligence**: Market analysis, competitive insights, and strategic recommendations\n\n## Response Guidelines:\n- Be concise and actionable\n- Provide specific data when available\n- Format responses in clear sections\n- Include relevant metrics and KPIs\n- Suggest next steps\n\nAlways maintain JetVision's luxury brand standards in your communication."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [500, 200],
      "id": "jetvision-agent",
      "name": "JetVision AI Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Format the response for the frontend\nconst agentResponse = $input.item.json.output || $input.item.json.text || '';\nconst error = $input.item.error;\n\nif (error) {\n  // Handle error case\n  return {\n    success: false,\n    error: error.message || 'An error occurred processing your request',\n    message: 'I encountered an issue processing your request. Please try again or contact support.',\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Success response\nreturn {\n  success: true,\n  response: agentResponse,\n  message: agentResponse,\n  text: agentResponse,\n  metadata: {\n    model: 'jetvision-agent',\n    timestamp: new Date().toISOString(),\n    source: 'n8n-workflow'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 200],
      "id": "format-response",
      "name": "Format Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "values": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [900, 200],
      "id": "respond-webhook",
      "name": "Send Response"
    },
    {
      "parameters": {
        "sendTo": "kingler@me.com",
        "subject": "JetVision Agent Query: {{ $('Prepare Data').item.json.message.substring(0, 50) }}",
        "message": "Query: {{ $('Prepare Data').item.json.message }}\n\nResponse: {{ $('JetVision AI Agent').item.json.output }}\n\nTimestamp: {{ $('Prepare Data').item.json.timestamp }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [700, 400],
      "id": "send-email",
      "name": "Log to Email (Async)",
      "continueOnFail": true
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Prepare Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Data": {
      "main": [
        [
          {
            "node": "JetVision AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JetVision AI Agent": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Email (Async)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionTimeout": 9,
    "errorWorkflow": "error-handler-workflow"
  }
}