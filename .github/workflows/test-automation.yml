name: JetVision Platform Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  BUN_VERSION: '1.2.21'
  APOLLO_API_KEY: ${{ secrets.APOLLO_API_KEY }}
  AVAINODE_API_KEY: ${{ secrets.AVAINODE_API_KEY }}
  
jobs:
  # Static Analysis and Linting
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies - Apollo MCP Server
        working-directory: ./apollo-io-mcp-server
        run: npm ci
        
      - name: Install dependencies - Avainode MCP Server
        working-directory: ./avainode-mcp-server
        run: npm ci
        
      - name: Install dependencies - JetVision Agent
        working-directory: ./jetvision-agent
        run: bun install --frozen-lockfile
        
      - name: Lint Apollo MCP Server
        working-directory: ./apollo-io-mcp-server
        run: npm run lint
        
      - name: Lint Avainode MCP Server
        working-directory: ./avainode-mcp-server
        run: npm run lint
        
      - name: Lint JetVision Agent
        working-directory: ./jetvision-agent
        run: bun run lint
        
      - name: Format Check Apollo MCP Server
        working-directory: ./apollo-io-mcp-server
        run: npm run format:check
        
      - name: Format Check Avainode MCP Server
        working-directory: ./avainode-mcp-server
        run: npm run format:check
        
      - name: Format Check JetVision Agent
        working-directory: ./jetvision-agent
        run: bun run format:check

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [apollo-mcp-server, avainode-mcp-server, jetvision-agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Bun (for jetvision-agent)
        if: matrix.component == 'jetvision-agent'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies - Apollo MCP Server
        if: matrix.component == 'apollo-mcp-server'
        working-directory: ./apollo-io-mcp-server
        run: npm ci
        
      - name: Install dependencies - Avainode MCP Server
        if: matrix.component == 'avainode-mcp-server'
        working-directory: ./avainode-mcp-server
        run: npm ci
        
      - name: Install dependencies - JetVision Agent
        if: matrix.component == 'jetvision-agent'
        working-directory: ./jetvision-agent
        run: bun install --frozen-lockfile
        
      - name: Run Unit Tests - Apollo MCP Server
        if: matrix.component == 'apollo-mcp-server'
        working-directory: ./apollo-io-mcp-server
        run: npm run test -- --coverage --coverageReporters=lcov --testPathIgnorePatterns=integration,e2e
        
      - name: Run Unit Tests - Avainode MCP Server
        if: matrix.component == 'avainode-mcp-server'
        working-directory: ./avainode-mcp-server
        run: npm run test -- --coverage --coverageReporters=lcov --testPathIgnorePatterns=integration,e2e
        
      - name: Run Unit Tests - JetVision Agent
        if: matrix.component == 'jetvision-agent'
        working-directory: ./jetvision-agent/apps/web
        run: bun run test:ci
        
      - name: Upload Coverage - Apollo MCP Server
        if: matrix.component == 'apollo-mcp-server'
        uses: codecov/codecov-action@v3
        with:
          file: ./apollo-io-mcp-server/coverage/lcov.info
          flags: apollo-mcp-server
          name: apollo-mcp-server-coverage
          
      - name: Upload Coverage - Avainode MCP Server
        if: matrix.component == 'avainode-mcp-server'
        uses: codecov/codecov-action@v3
        with:
          file: ./avainode-mcp-server/coverage/lcov.info
          flags: avainode-mcp-server
          name: avainode-mcp-server-coverage
          
      - name: Upload Coverage - JetVision Agent
        if: matrix.component == 'jetvision-agent'
        uses: codecov/codecov-action@v3
        with:
          file: ./jetvision-agent/apps/web/coverage/lcov.info
          flags: jetvision-agent
          name: jetvision-agent-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies - All components
        run: |
          cd apollo-io-mcp-server && npm ci &
          cd avainode-mcp-server && npm ci &
          cd jetvision-agent && bun install --frozen-lockfile &
          wait
          
      - name: Build MCP Servers
        run: |
          cd apollo-io-mcp-server && npm run build &
          cd avainode-mcp-server && npm run build &
          wait
          
      - name: Start Apollo MCP Server in background
        working-directory: ./apollo-io-mcp-server
        run: |
          npm start &
          echo $! > apollo-server.pid
          sleep 5
          
      - name: Start Avainode MCP Server in background
        working-directory: ./avainode-mcp-server
        run: |
          PORT=8124 npm start &
          echo $! > avainode-server.pid
          sleep 5
          
      - name: Wait for MCP servers to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8123/health; do sleep 1; done' || true
          timeout 30 bash -c 'until curl -f http://localhost:8124/health; do sleep 1; done' || true
          
      - name: Run Integration Tests - Apollo MCP Server
        working-directory: ./apollo-io-mcp-server
        run: npm run test -- --testPathPattern=integration --verbose
        
      - name: Run Integration Tests - Avainode MCP Server
        working-directory: ./avainode-mcp-server
        run: npm run test -- --testPathPattern=integration --verbose
        
      - name: Build JetVision Agent
        working-directory: ./jetvision-agent
        run: bun run build
        
      - name: Start JetVision Agent in background
        working-directory: ./jetvision-agent/apps/web
        run: |
          npm start &
          echo $! > webapp.pid
          sleep 10
          
      - name: Wait for Web App to be ready
        run: timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
      - name: Run Full Integration Tests
        run: |
          cd __tests__/integration
          npm install
          npx jest webapp-mcp-integration.test.ts --verbose
          
      - name: Stop services
        if: always()
        run: |
          [ -f apollo-io-mcp-server/apollo-server.pid ] && kill $(cat apollo-io-mcp-server/apollo-server.pid) || true
          [ -f avainode-mcp-server/avainode-server.pid ] && kill $(cat avainode-mcp-server/avainode-server.pid) || true
          [ -f jetvision-agent/apps/web/webapp.pid ] && kill $(cat jetvision-agent/apps/web/webapp.pid) || true

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install and start all services
        run: |
          # Install dependencies
          cd apollo-io-mcp-server && npm ci && npm run build &
          cd avainode-mcp-server && npm ci && npm run build &
          cd jetvision-agent && bun install --frozen-lockfile &
          wait
          
          # Start services
          cd apollo-io-mcp-server && npm start &
          cd avainode-mcp-server && PORT=8124 npm start &
          cd jetvision-agent && bun run build && bun start &
          
          # Wait for services to be ready
          sleep 15
          
      - name: Run E2E Tests - Apollo MCP Server
        working-directory: ./apollo-io-mcp-server
        run: npm run test -- --testPathPattern=e2e --verbose --detectOpenHandles
        
      - name: Run E2E Tests - Avainode MCP Server
        working-directory: ./avainode-mcp-server
        run: npm run test -- --testPathPattern=e2e --verbose --detectOpenHandles

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install and start services
        run: |
          cd apollo-io-mcp-server && npm ci && npm run build && npm start &
          cd avainode-mcp-server && npm ci && npm run build && PORT=8124 npm start &
          sleep 10
          
      - name: Run Performance Tests - Apollo MCP Server
        run: |
          cd __tests__/performance
          node mcp-load-test.js http://localhost:8123 --concurrency=20 --iterations=100
          
      - name: Run Performance Tests - Avainode MCP Server
        run: |
          cd __tests__/performance
          node mcp-load-test.js http://localhost:8124 --concurrency=20 --iterations=100
          
      - name: Archive Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: __tests__/performance/results/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit - Apollo MCP Server
        working-directory: ./apollo-io-mcp-server
        run: npm audit --audit-level=moderate
        
      - name: Run npm audit - Avainode MCP Server
        working-directory: ./avainode-mcp-server
        run: npm audit --audit-level=moderate

  # Deployment Tests
  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Test Build - Apollo MCP Server
        working-directory: ./apollo-io-mcp-server
        run: |
          npm ci
          npm run build
          
      - name: Test Build - Avainode MCP Server
        working-directory: ./avainode-mcp-server
        run: |
          npm ci
          npm run build
          
      - name: Test Build - JetVision Agent
        working-directory: ./jetvision-agent
        run: |
          bun install --frozen-lockfile
          bun run build
          
      - name: Test Cloudflare Workers Build
        working-directory: ./apollo-io-mcp-server
        run: |
          npm run build:worker
          
      - name: Validate package.json files
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const packages = [
              './apollo-io-mcp-server/package.json',
              './avainode-mcp-server/package.json', 
              './jetvision-agent/package.json'
            ];
            
            packages.forEach(pkg => {
              const content = JSON.parse(fs.readFileSync(pkg, 'utf8'));
              console.log(\`✓ \${pkg} is valid JSON\`);
              
              if (!content.name || !content.version) {
                throw new Error(\`Invalid package.json: \${pkg}\`);
              }
            });
            
            console.log('✅ All package.json files are valid');
          "

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Notify Success
        if: needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          echo "- Linting: ${{ needs.lint-and-format.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          
      - name: Notify Failure
        if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure'
        run: |
          echo "❌ Some tests failed:"
          echo "- Linting: ${{ needs.lint-and-format.result }}"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          exit 1