name = "apollo-mcp"
main = "src/worker-n8n.ts"
compatibility_date = "2024-01-15"
compatibility_flags = ["nodejs_compat"]

# Account and routing
account_id = "485f44eabd68fe8c5301c12472a02612"
workers_dev = true
route = { pattern = "apollo-mcp.designthru.ai/*", zone_name = "designthru.ai" }

# Build configuration handled by wrangler

# Environment variables (non-secret)
[vars]
NODE_ENV = "production"
LOG_LEVEL = "info"
MCP_VERSION = "1.0.0"

# KV Namespaces for session storage
[[kv_namespaces]]
binding = "SESSIONS"
id = "00b6f8ab2725486484f172d1ad7bdc33"

# Durable Objects (if using paid plan for persistent connections)
# [[durable_objects.bindings]]
# name = "MCP_SESSION"
# class_name = "MCPSession"
# script_name = "apollo-mcp"

# R2 bucket bindings (if needed for file storage)
# [[r2_buckets]]
# binding = "STORAGE"
# bucket_name = "apollo-mcp-storage"

# Service bindings to other workers (if needed)
# [[services]]
# binding = "AVAINODE_SERVICE"
# service = "avainode-mcp"

# Development settings
[dev]
port = 8123
local_protocol = "http"

# Environment-specific settings
[env.staging]
name = "apollo-mcp-staging"
route = { pattern = "apollo-mcp-staging.designthru.ai/*", zone_name = "designthru.ai" }

[env.staging.vars]
NODE_ENV = "staging"
LOG_LEVEL = "debug"

[env.production]
name = "apollo-mcp"
route = { pattern = "apollo-mcp.designthru.ai/*", zone_name = "designthru.ai" }

[env.production.vars]
NODE_ENV = "production"
LOG_LEVEL = "warn"
MCP_VERSION = "1.0.0"

[[env.production.kv_namespaces]]
binding = "SESSIONS"
id = "00b6f8ab2725486484f172d1ad7bdc33"

# Limits (requires paid plan)
# [limits]
# cpu_ms = 50

# Observability
[observability]
enabled = true

# Tail consumers for log streaming
# [[tail_consumers]]
# service = "log-aggregator"

# CORS settings will be handled in the worker code
# Rate limiting will be handled in the worker code