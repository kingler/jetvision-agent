/**
 * Unit tests for n8n-response-transformer.ts
 * Generated by TDD Enforcer
 */

import { describe, it, expect, beforeEach } from '@jest/globals';
import { 
  extractStructuredData, 
  transformN8nResponse,
  formatDisplayText,
  validateResponse,
  getResponseSummary 
} from '../n8n-response-transformer';

describe('n8n-response-transformer', () => {
  beforeEach(() => {
    // Setup test environment
  });

  describe('extractStructuredData', () => {
    it('should extract Apollo results from webhookData', () => {
      const webhookData = {
        apolloResults: {
          type: 'apollo_leads',
          leads: [
            {
              name: 'John Doe',
              title: 'Executive Assistant',
              company: 'Acme Corp',
              email: 'john@acme.com'
            }
          ],
          summary: 'Found 1 leads',
          source: 'apollo.io'
        }
      };

      const result = extractStructuredData('sample text', webhookData);
      
      expect(result).toEqual({
        type: 'apollo_leads',
        data: webhookData.apolloResults
      });
    });

    it('should extract structuredData from webhookData', () => {
      const webhookData = {
        structuredData: {
          type: 'people_search',
          data: { people: [] }
        }
      };

      const result = extractStructuredData('sample text', webhookData);
      
      expect(result).toEqual(webhookData.structuredData);
    });

    it('should return null for empty responseText', () => {
      const result = extractStructuredData('', {});
      expect(result).toBeNull();
    });

    it('should return null for non-string responseText', () => {
      // @ts-expect-error - Testing invalid input
      const result = extractStructuredData(null, {});
      expect(result).toBeNull();
    });

    it('should parse JSON structured data from responseText', () => {
      const responseText = 'Some text {"type": "apollo_leads", "data": {"leads": []}} more text';
      
      const result = extractStructuredData(responseText, {});
      
      expect(result).toEqual({
        type: 'apollo_leads',
        data: { leads: [] }
      });
    });

    it('should detect people search patterns', () => {
      const responseText = 'Found people search results with executives';
      
      const result = extractStructuredData(responseText, {});
      
      expect(result?.type).toBe('people_search');
      expect(result?.data.source).toBe('apollo.io');
    });

    it('should detect apollo leads patterns', () => {
      const responseText = 'Apollo lead generation found executive assistant contacts';
      
      const result = extractStructuredData(responseText, {});
      
      expect(result?.type).toBe('apollo_leads');
      expect(result?.data.source).toBe('apollo.io');
    });

    it('should detect aircraft search patterns', () => {
      const responseText = 'Found available Gulfstream aircraft for charter';
      
      const result = extractStructuredData(responseText, {});
      
      expect(result?.type).toBe('aircraft_search');
      expect(result?.data.source).toBe('avinode');
    });
  });

  describe('transformN8nResponse', () => {
    it('should transform basic webhook data', () => {
      const webhookData = {
        response: 'Test response',
        executionId: 'exec-123',
        workflowId: 'workflow-456'
      };

      const result = transformN8nResponse(webhookData, 'thread-1', 'item-1');

      expect(result.id).toBe('item-1');
      expect(result.threadId).toBe('thread-1');
      expect(result.answer.text).toContain('Test response');
      expect(result.metadata.executionId).toBe('exec-123');
      expect(result.metadata.source).toBe('n8n');
      expect(result.status).toBe('COMPLETED');
    });

    it('should handle Apollo results in webhook data', () => {
      const webhookData = {
        response: 'Apollo search completed',
        apolloResults: {
          type: 'apollo_leads',
          leads: [{ name: 'Test Lead', company: 'Test Corp' }],
          summary: 'Found 1 leads'
        }
      };

      const result = transformN8nResponse(webhookData, 'thread-1', 'item-1');

      expect(result.answer.structured?.type).toBe('apollo_leads');
      expect(result.answer.structured?.data.leads).toHaveLength(1);
    });

    it('should handle null webhook data gracefully', () => {
      const invalidWebhookData = null;

      const result = transformN8nResponse(invalidWebhookData, 'thread-1', 'item-1');

      expect(result.status).toBe('COMPLETED');
      expect(result.answer.text).toContain('No webhook data provided');
    });
  });

  describe('validateResponse', () => {
    it('should validate correct response structure', () => {
      const validResponse = {
        id: 'test-id',
        threadId: 'test-thread',
        answer: { text: 'test answer' },
        status: 'COMPLETED'
      };

      expect(validateResponse(validResponse)).toBe(true);
    });

    it('should reject invalid response structure', () => {
      const invalidResponse = {
        id: 'test-id',
        // missing threadId and answer
      };

      expect(validateResponse(invalidResponse)).toBe(false);
    });
  });

  describe('getResponseSummary', () => {
    it('should generate response summary', () => {
      const response = {
        id: 'test-id',
        threadId: 'test-thread', 
        answer: { 
          text: 'test answer',
          structured: { type: 'apollo_leads', data: {} }
        },
        sources: [{ name: 'Apollo' }],
        metadata: {},
        status: 'COMPLETED' as const
      };

      const summary = getResponseSummary(response);

      expect(summary).toContain('11 chars');
      expect(summary).toContain('structured: true');
      expect(summary).toContain('sources: 1');
      expect(summary).toContain('status: COMPLETED');
    });
  });
});