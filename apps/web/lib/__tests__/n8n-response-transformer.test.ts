/**
 * Unit tests for ../../apps/web/lib/n8n-response-transformer.ts
 * Generated by TDD Enforcer
 */

import { describe, it, expect, beforeEach, jest } from '@jest/globals';
import {
    transformN8nResponse,
    transformHybridResponse,
    extractStructuredData,
    type StructuredData,
    type HybridResponseData,
    type TransformedResponse,
} from '../n8n-response-transformer';

// Mock data for tests
const mockApolloLeads = [
    {
        name: 'John Smith',
        title: 'Executive Assistant',
        company: 'Acme Corp',
        email: 'john@acme.com',
        phone: '+1-555-0123',
        location: 'New York, NY',
    },
    {
        name: 'Jane Doe',
        title: 'Managing Director',
        company: 'Beta LLC',
        email: 'jane@beta.com',
        location: 'San Francisco, CA',
    },
    {
        name: 'Bob Johnson',
        title: 'VP Operations',
        company: 'Gamma Inc',
        email: 'bob@gamma.com',
        location: 'Austin, TX',
    },
    {
        name: 'Alice Cooper',
        title: 'Chief Marketing Officer',
        company: 'Delta Corp',
        email: 'alice@delta.com',
        location: 'Seattle, WA',
    },
    {
        name: 'Charlie Brown',
        title: 'Executive Assistant',
        company: 'Echo Ltd',
        email: 'charlie@echo.com',
        location: 'Boston, MA',
    },
];

const mockApolloOrganizations = [
    {
        name: 'Tech Corp',
        domain: 'tech.com',
        industry: 'Technology',
        employee_count: '500-1000',
        revenue: '$50M',
    },
    {
        name: 'Finance Inc',
        domain: 'finance.com',
        industry: 'Financial Services',
        employee_count: '1000+',
        revenue: '$100M',
    },
    {
        name: 'Manufacturing Co',
        domain: 'mfg.com',
        industry: 'Manufacturing',
        employee_count: '250-500',
        revenue: '$25M',
    },
    {
        name: 'Retail Solutions',
        domain: 'retail.com',
        industry: 'Retail',
        employee_count: '100-250',
        revenue: '$15M',
    },
    {
        name: 'Healthcare Systems',
        domain: 'health.com',
        industry: 'Healthcare',
        employee_count: '1000+',
        revenue: '$150M',
    },
];

const mockHybridWebhookData = {
    isHybridRequest: true,
    hybridType: 'apollo-insights',
    message: 'Find executive assistants at NYC private equity firms',
    apollo_data: {
        leads: mockApolloLeads.slice(0, 2),
    },
    commentary: {
        analysis: 'Found 2 qualified prospects in New York area',
        key_insights: ['High-quality contacts', 'Verified email addresses'],
        recommendations: ['Create outreach sequence', 'Schedule follow-ups'],
        next_steps: ['Review profiles', 'Send connection requests'],
    },
    apolloContext: {
        intentType: 'people_search',
        confidence: 0.8,
    },
    executionId: 'exec-123',
    workflowId: 'workflow-456',
};

const mockRegularWebhookData = {
    response: 'Regular response from N8N workflow',
    executionId: 'exec-789',
    workflowId: 'workflow-012',
};

describe('n8n-response-transformer', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    describe('transformN8nResponse', () => {
        it('should transform regular N8N response correctly', () => {
            const result = transformN8nResponse(
                mockRegularWebhookData,
                'thread-123',
                'item-456'
            );

            expect(result).toBeDefined();
            expect(result.id).toBe('item-456');
            expect(result.threadId).toBe('thread-123');
            expect(result.answer.text).toBe('Regular response from N8N workflow');
            expect(result.metadata.executionId).toBe('exec-789');
            expect(result.metadata.workflowId).toBe('workflow-012');
            expect(result.status).toBe('COMPLETED');
        });

        it('should detect and route hybrid requests to transformHybridResponse', () => {
            const result = transformN8nResponse(
                mockHybridWebhookData,
                'thread-123',
                'item-456'
            );

            expect(result).toBeDefined();
            expect(result.metadata.source).toBe('hybrid');
            expect(result.metadata.hybridType).toBe('apollo-insights');
            expect(result.answer.structured?.type).toBe('apollo_hybrid');
        });

        it('should handle missing threadItemId by generating one', () => {
            const result = transformN8nResponse(
                mockRegularWebhookData,
                'thread-123',
                ''
            );

            expect(result.id).toMatch(/^n8n-\d+$/);
        });

        it('should handle null data gracefully', () => {
            const invalidData = null;
            
            const result = transformN8nResponse(
                invalidData,
                'thread-123',
                'item-456'
            );

            expect(result.status).toBe('COMPLETED');
            expect(result.answer.text).toBe('No webhook data provided');
            expect(result.metadata.source).toBe('n8n');
        });

        it('should extract sources from webhook data', () => {
            const dataWithSources = {
                ...mockRegularWebhookData,
                sources: ['source1', 'source2'],
            };

            const result = transformN8nResponse(
                dataWithSources,
                'thread-123',
                'item-456'
            );

            expect(result.sources).toEqual(['source1', 'source2']);
        });
    });

    describe('transformHybridResponse', () => {
        it('should transform hybrid Apollo response correctly', () => {
            const result = transformHybridResponse(
                mockHybridWebhookData,
                'thread-123',
                'item-456'
            );

            expect(result).toBeDefined();
            expect(result.id).toBe('item-456');
            expect(result.threadId).toBe('thread-123');
            expect(result.metadata.source).toBe('hybrid');
            expect(result.answer.structured?.type).toBe('apollo_hybrid');
            
            const hybridData = result.answer.structured?.data as HybridResponseData;
            expect(hybridData.apollo_data.leads).toHaveLength(2);
            expect(hybridData.commentary.analysis).toBe('Found 2 qualified prospects in New York area');
            expect(hybridData.source_query).toBe('Find executive assistants at NYC private equity firms');
            expect(hybridData.confidence_score).toBe(0.8);
        });

        it('should generate narrative text from commentary and data', () => {
            const result = transformHybridResponse(
                mockHybridWebhookData,
                'thread-123',
                'item-456'
            );

            expect(result.answer.text).toContain('🧠 **Intelligence Analysis**');
            expect(result.answer.text).toContain('Found 2 qualified prospects in New York area');
            expect(result.answer.text).toContain('**Key Insights:**');
            expect(result.answer.text).toContain('💡 High-quality contacts');
            expect(result.answer.text).toContain('📊 **Apollo.io Results**');
            expect(result.answer.text).toContain('John Smith');
            expect(result.answer.text).toContain('🎯 **Recommended Actions**');
            expect(result.answer.text).toContain('📋 **Next Steps**');
        });

        it('should handle missing commentary by generating fallback', () => {
            const dataWithoutCommentary = {
                ...mockHybridWebhookData,
                apollo_data: {
                    leads: mockApolloLeads.slice(0, 2),
                },
                commentary: undefined,
            };

            const result = transformHybridResponse(
                dataWithoutCommentary,
                'thread-123',
                'item-456'
            );

            const hybridData = result.answer.structured?.data as HybridResponseData;
            expect(hybridData.commentary.analysis).toContain('Found 2 potential prospects');
            expect(hybridData.commentary.key_insights).toContain('Identified 2 qualified contacts');
        });

        it('should handle organization data', () => {
            const orgData = {
                ...mockHybridWebhookData,
                apollo_data: {
                    organizations: mockApolloOrganizations,
                },
            };

            const result = transformHybridResponse(orgData, 'thread-123', 'item-456');
            
            expect(result.answer.text).toContain('🏢 **Company Intelligence**');
            expect(result.answer.text).toContain('Tech Corp');
            expect(result.answer.text).toContain('Technology');
        });

        it('should handle minimal hybrid data gracefully', () => {
            const minimalHybridData = {
                isHybridRequest: true,
                // Minimal data to test graceful handling
            };

            const result = transformHybridResponse(
                minimalHybridData,
                'thread-123',
                'item-456'
            );

            expect(result).toBeDefined();
            expect(result.answer.structured?.type).toBe('apollo_hybrid');
            expect(result.metadata.source).toBe('hybrid');
        });
    });

    describe('extractStructuredData', () => {
        it('should return null for invalid input', () => {
            expect(extractStructuredData('')).toBeNull();
            expect(extractStructuredData(null as any)).toBeNull();
            expect(extractStructuredData(undefined as any)).toBeNull();
        });

        it('should parse JSON structured data', () => {
            const jsonText = '{"type": "apollo_leads", "data": {"leads": []}}';
            const result = extractStructuredData(jsonText);

            expect(result).toBeDefined();
            expect(result?.type).toBe('apollo_leads');
            expect(result?.data.leads).toEqual([]);
        });

        it('should detect Google Sheets patterns', () => {
            const sheetsText = 'Google Sheets created successfully with spreadsheetId abc123';
            const result = extractStructuredData(sheetsText);

            expect(result).toBeDefined();
            expect(result?.type).toBe('google_sheets');
            expect(result?.data.source).toBe('google_sheets');
        });

        it('should detect Apollo people search patterns', () => {
            const apolloText = 'Found 5 people search results including executives';
            const result = extractStructuredData(apolloText);

            expect(result).toBeDefined();
            expect(result?.type).toBe('people_search');
            expect(result?.data.source).toBe('apollo');
        });

        it('should detect aircraft search patterns', () => {
            const aircraftText = 'Available aircraft found: 3 jets matching criteria';
            const result = extractStructuredData(aircraftText);

            expect(result).toBeDefined();
            expect(result?.type).toBe('aircraft_search');
            expect(result?.data.source).toBe('avinode');
        });

        it('should handle invalid JSON gracefully', () => {
            const invalidJson = '{"type": "apollo_leads", invalid json}';
            const result = extractStructuredData(invalidJson);

            // Should return null for invalid JSON that can't be parsed
            expect(result).toBeNull();
        });

        it('should return general type for unmatched patterns', () => {
            const genericText = 'Some random response text that does not match patterns';
            const result = extractStructuredData(genericText);

            expect(result).toBeNull();
        });
    });

    // Test helper functions through integration since they're not exported
    describe('integration tests for helper functions', () => {
        it('should extract Apollo data from various locations in webhook', () => {
            const testCases = [
                { apollo_data: { leads: mockApolloLeads } },
                { data: { apollo_data: { leads: mockApolloLeads } } },
                { response: { apollo_data: { leads: mockApolloLeads } } },
                { people: mockApolloLeads },
                { data: mockApolloLeads },
            ];

            testCases.forEach(testData => {
                const result = transformHybridResponse(
                    { ...testData, isHybridRequest: true },
                    'thread-123',
                    'item-456'
                );

                const hybridData = result.answer.structured?.data as HybridResponseData;
                expect(hybridData.apollo_data.leads).toBeDefined();
            });
        });

        it('should generate commentary for organizations data', () => {
            const orgData = {
                isHybridRequest: true,
                apollo_data: { organizations: mockApolloOrganizations },
            };

            const result = transformHybridResponse(orgData, 'thread-123', 'item-456');
            
            const hybridData = result.answer.structured?.data as HybridResponseData;
            expect(hybridData.commentary.analysis).toContain('companies matching your search');
            expect(hybridData.commentary.key_insights[0]).toContain('target organizations');
        });

        it('should create comprehensive narrative with all sections', () => {
            const completeData = {
                isHybridRequest: true,
                apollo_data: {
                    leads: mockApolloLeads.slice(0, 5), // More than 3 to test truncation
                    organizations: mockApolloOrganizations.slice(0, 5),
                },
                commentary: {
                    analysis: 'Comprehensive analysis',
                    key_insights: ['Insight 1', 'Insight 2'],
                    recommendations: ['Rec 1', 'Rec 2'],
                    next_steps: ['Step 1', 'Step 2'],
                },
            };

            const result = transformHybridResponse(completeData, 'thread-123', 'item-456');
            
            expect(result.answer.text).toContain('🧠 **Intelligence Analysis**');
            expect(result.answer.text).toContain('**Key Insights:**');
            expect(result.answer.text).toContain('📊 **Apollo.io Results**');
            expect(result.answer.text).toContain('🏢 **Company Intelligence**');
            expect(result.answer.text).toContain('🎯 **Recommended Actions**');
            expect(result.answer.text).toContain('📋 **Next Steps**');
            expect(result.answer.text).toContain('*...and 2 more prospects*');
        });

        it('should handle empty data gracefully', () => {
            const emptyData = {
                isHybridRequest: true,
                apollo_data: {},
            };

            const result = transformHybridResponse(emptyData, 'thread-123', 'item-456');
            
            expect(result.answer.text).toContain('Processing completed');
        });
    });
});